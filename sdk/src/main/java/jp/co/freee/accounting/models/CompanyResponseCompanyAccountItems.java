/*
 * freee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package jp.co.freee.accounting.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * CompanyResponseCompanyAccountItems
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CompanyResponseCompanyAccountItems {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_TAX_ID = "default_tax_id";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TAX_ID)
  private Integer defaultTaxId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SHORTCUT = "shortcut";
  @SerializedName(SERIALIZED_NAME_SHORTCUT)
  private String shortcut;

  public CompanyResponseCompanyAccountItems() { 
  }

  public CompanyResponseCompanyAccountItems categories(List<String> categories) {
    
    this.categories = categories;
    return this;
  }

  public CompanyResponseCompanyAccountItems addCategoriesItem(String categoriesItem) {
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getCategories() {
    return categories;
  }


  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public CompanyResponseCompanyAccountItems defaultTaxId(Integer defaultTaxId) {
    
    this.defaultTaxId = defaultTaxId;
    return this;
  }

   /**
   * デフォルト設定がされている税区分ID
   * minimum: 1
   * maximum: 2147483647
   * @return defaultTaxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "34", value = "デフォルト設定がされている税区分ID")

  public Integer getDefaultTaxId() {
    return defaultTaxId;
  }


  public void setDefaultTaxId(Integer defaultTaxId) {
    this.defaultTaxId = defaultTaxId;
  }


  public CompanyResponseCompanyAccountItems id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * 勘定科目ID
   * minimum: 1
   * maximum: 2147483647
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "勘定科目ID")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public CompanyResponseCompanyAccountItems name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * 勘定科目名 (30文字以内)
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ソフトウェア", required = true, value = "勘定科目名 (30文字以内)")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CompanyResponseCompanyAccountItems shortcut(String shortcut) {
    
    this.shortcut = shortcut;
    return this;
  }

   /**
   * ショートカット1 (20文字以内)
   * @return shortcut
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SOFUTO", value = "ショートカット1 (20文字以内)")

  public String getShortcut() {
    return shortcut;
  }


  public void setShortcut(String shortcut) {
    this.shortcut = shortcut;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyResponseCompanyAccountItems companyResponseCompanyAccountItems = (CompanyResponseCompanyAccountItems) o;
    return Objects.equals(this.categories, companyResponseCompanyAccountItems.categories) &&
        Objects.equals(this.defaultTaxId, companyResponseCompanyAccountItems.defaultTaxId) &&
        Objects.equals(this.id, companyResponseCompanyAccountItems.id) &&
        Objects.equals(this.name, companyResponseCompanyAccountItems.name) &&
        Objects.equals(this.shortcut, companyResponseCompanyAccountItems.shortcut);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, defaultTaxId, id, name, shortcut);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyResponseCompanyAccountItems {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    defaultTaxId: ").append(toIndentedString(defaultTaxId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shortcut: ").append(toIndentedString(shortcut)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

