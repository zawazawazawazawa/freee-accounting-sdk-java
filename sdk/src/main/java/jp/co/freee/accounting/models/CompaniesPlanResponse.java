/*
 * freee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package jp.co.freee.accounting.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CompaniesPlanResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CompaniesPlanResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  /**
   * 事業形態（個人事業主: personal、法人: corporate）
   */
  @JsonAdapter(OrgCodeEnum.Adapter.class)
  public enum OrgCodeEnum {
    PERSONAL("personal"),
    
    CORPORATE("corporate");

    private String value;

    OrgCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrgCodeEnum fromValue(String value) {
      for (OrgCodeEnum b : OrgCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrgCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrgCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrgCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrgCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORG_CODE = "org_code";
  @SerializedName(SERIALIZED_NAME_ORG_CODE)
  private OrgCodeEnum orgCode;

  /**
   * 会計プラン 個人用(non_charged: 無料プラン、starter: スターター、standard: スタンダード、premium: プレミアム) 法人用(non_charged: 無料プラン、minimum: ミニマム、basic: ベーシック、professional: プロフェッショナル、enterprise: エンタープライズ)
   */
  @JsonAdapter(PlanEnum.Adapter.class)
  public enum PlanEnum {
    NON_CHARGED("non_charged"),
    
    STARTER("starter"),
    
    STANDARD("standard"),
    
    PREMIUM("premium"),
    
    MINIMUM("minimum"),
    
    BASIC("basic"),
    
    PROFESSIONAL("professional"),
    
    ENTERPRISE("enterprise");

    private String value;

    PlanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlanEnum fromValue(String value) {
      for (PlanEnum b : PlanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlanEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private PlanEnum plan;

  public CompaniesPlanResponse() { 
  }

  public CompaniesPlanResponse id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * 事業所ID
   * minimum: 1
   * maximum: 2147483647
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "事業所ID")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public CompaniesPlanResponse orgCode(OrgCodeEnum orgCode) {
    
    this.orgCode = orgCode;
    return this;
  }

   /**
   * 事業形態（個人事業主: personal、法人: corporate）
   * @return orgCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "personal", required = true, value = "事業形態（個人事業主: personal、法人: corporate）")

  public OrgCodeEnum getOrgCode() {
    return orgCode;
  }


  public void setOrgCode(OrgCodeEnum orgCode) {
    this.orgCode = orgCode;
  }


  public CompaniesPlanResponse plan(PlanEnum plan) {
    
    this.plan = plan;
    return this;
  }

   /**
   * 会計プラン 個人用(non_charged: 無料プラン、starter: スターター、standard: スタンダード、premium: プレミアム) 法人用(non_charged: 無料プラン、minimum: ミニマム、basic: ベーシック、professional: プロフェッショナル、enterprise: エンタープライズ)
   * @return plan
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "basic", required = true, value = "会計プラン 個人用(non_charged: 無料プラン、starter: スターター、standard: スタンダード、premium: プレミアム) 法人用(non_charged: 無料プラン、minimum: ミニマム、basic: ベーシック、professional: プロフェッショナル、enterprise: エンタープライズ)")

  public PlanEnum getPlan() {
    return plan;
  }


  public void setPlan(PlanEnum plan) {
    this.plan = plan;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompaniesPlanResponse companiesPlanResponse = (CompaniesPlanResponse) o;
    return Objects.equals(this.id, companiesPlanResponse.id) &&
        Objects.equals(this.orgCode, companiesPlanResponse.orgCode) &&
        Objects.equals(this.plan, companiesPlanResponse.plan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, orgCode, plan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompaniesPlanResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    orgCode: ").append(toIndentedString(orgCode)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

