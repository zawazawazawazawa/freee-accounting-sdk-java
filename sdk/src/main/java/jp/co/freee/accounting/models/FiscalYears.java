/*
 * freee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package jp.co.freee.accounting.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * FiscalYears
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FiscalYears {
  public static final String SERIALIZED_NAME_DEPRECIATION_RECORD_METHOD = "depreciation_record_method";
  @SerializedName(SERIALIZED_NAME_DEPRECIATION_RECORD_METHOD)
  private Integer depreciationRecordMethod;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_INDIRECT_WRITE_OFF_METHOD = "indirect_write_off_method";
  @SerializedName(SERIALIZED_NAME_INDIRECT_WRITE_OFF_METHOD)
  private Boolean indirectWriteOffMethod;

  public static final String SERIALIZED_NAME_RETURN_CODE = "return_code";
  @SerializedName(SERIALIZED_NAME_RETURN_CODE)
  private Integer returnCode;

  public static final String SERIALIZED_NAME_SALES_TAX_BUSINESS_CODE = "sales_tax_business_code";
  @SerializedName(SERIALIZED_NAME_SALES_TAX_BUSINESS_CODE)
  private Integer salesTaxBusinessCode;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_TAX_ACCOUNT_METHOD = "tax_account_method";
  @SerializedName(SERIALIZED_NAME_TAX_ACCOUNT_METHOD)
  private Integer taxAccountMethod;

  public static final String SERIALIZED_NAME_TAX_FRACTION = "tax_fraction";
  @SerializedName(SERIALIZED_NAME_TAX_FRACTION)
  private Integer taxFraction;

  public static final String SERIALIZED_NAME_TAX_METHOD = "tax_method";
  @SerializedName(SERIALIZED_NAME_TAX_METHOD)
  private Integer taxMethod;

  public static final String SERIALIZED_NAME_USE_INDUSTRY_TEMPLATE = "use_industry_template";
  @SerializedName(SERIALIZED_NAME_USE_INDUSTRY_TEMPLATE)
  private Boolean useIndustryTemplate;

  public FiscalYears() { 
  }

  public FiscalYears depreciationRecordMethod(Integer depreciationRecordMethod) {
    
    this.depreciationRecordMethod = depreciationRecordMethod;
    return this;
  }

   /**
   * 月次償却（0: しない、1: する）
   * minimum: 0
   * maximum: 1
   * @return depreciationRecordMethod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "月次償却（0: しない、1: する）")

  public Integer getDepreciationRecordMethod() {
    return depreciationRecordMethod;
  }


  public void setDepreciationRecordMethod(Integer depreciationRecordMethod) {
    this.depreciationRecordMethod = depreciationRecordMethod;
  }


  public FiscalYears endDate(String endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * 期末日
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-12-17", value = "期末日")

  public String getEndDate() {
    return endDate;
  }


  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public FiscalYears indirectWriteOffMethod(Boolean indirectWriteOffMethod) {
    
    this.indirectWriteOffMethod = indirectWriteOffMethod;
    return this;
  }

   /**
   * 固定資産の控除法（true: 間接控除法、false: 直接控除法）
   * @return indirectWriteOffMethod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "固定資産の控除法（true: 間接控除法、false: 直接控除法）")

  public Boolean getIndirectWriteOffMethod() {
    return indirectWriteOffMethod;
  }


  public void setIndirectWriteOffMethod(Boolean indirectWriteOffMethod) {
    this.indirectWriteOffMethod = indirectWriteOffMethod;
  }


  public FiscalYears returnCode(Integer returnCode) {
    
    this.returnCode = returnCode;
    return this;
  }

   /**
   * 不動産所得使用区分（0: 一般、3: 一般/不動産） ※個人事業主のみ設定可能
   * minimum: 0
   * maximum: 3
   * @return returnCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "不動産所得使用区分（0: 一般、3: 一般/不動産） ※個人事業主のみ設定可能")

  public Integer getReturnCode() {
    return returnCode;
  }


  public void setReturnCode(Integer returnCode) {
    this.returnCode = returnCode;
  }


  public FiscalYears salesTaxBusinessCode(Integer salesTaxBusinessCode) {
    
    this.salesTaxBusinessCode = salesTaxBusinessCode;
    return this;
  }

   /**
   * 簡易課税用事業区分（0: 第一種：卸売業、1: 第二種：小売業、2: 第三種：農林水産業、工業、建設業、製造業など、3: 第四種：飲食店業など、4: 第五種：金融・保険業、運輸通信業、サービス業など、5: 第六種：不動産業など
   * minimum: 0
   * maximum: 5
   * @return salesTaxBusinessCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "簡易課税用事業区分（0: 第一種：卸売業、1: 第二種：小売業、2: 第三種：農林水産業、工業、建設業、製造業など、3: 第四種：飲食店業など、4: 第五種：金融・保険業、運輸通信業、サービス業など、5: 第六種：不動産業など")

  public Integer getSalesTaxBusinessCode() {
    return salesTaxBusinessCode;
  }


  public void setSalesTaxBusinessCode(Integer salesTaxBusinessCode) {
    this.salesTaxBusinessCode = salesTaxBusinessCode;
  }


  public FiscalYears startDate(String startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * 期首日
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-12-17", value = "期首日")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public FiscalYears taxAccountMethod(Integer taxAccountMethod) {
    
    this.taxAccountMethod = taxAccountMethod;
    return this;
  }

   /**
   * 消費税経理処理方法（0: 税込経理、1: 旧税抜経理、2: 税抜経理）
   * minimum: 0
   * maximum: 2
   * @return taxAccountMethod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "消費税経理処理方法（0: 税込経理、1: 旧税抜経理、2: 税抜経理）")

  public Integer getTaxAccountMethod() {
    return taxAccountMethod;
  }


  public void setTaxAccountMethod(Integer taxAccountMethod) {
    this.taxAccountMethod = taxAccountMethod;
  }


  public FiscalYears taxFraction(Integer taxFraction) {
    
    this.taxFraction = taxFraction;
    return this;
  }

   /**
   * 消費税端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）
   * minimum: 0
   * maximum: 2
   * @return taxFraction
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "消費税端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）")

  public Integer getTaxFraction() {
    return taxFraction;
  }


  public void setTaxFraction(Integer taxFraction) {
    this.taxFraction = taxFraction;
  }


  public FiscalYears taxMethod(Integer taxMethod) {
    
    this.taxMethod = taxMethod;
    return this;
  }

   /**
   * 課税区分（0: 免税、1: 簡易課税、2: 本則課税（個別対応方式）、3: 本則課税（一括比例配分方式）、4: 本則課税（全額控除））
   * minimum: 0
   * maximum: 4
   * @return taxMethod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "課税区分（0: 免税、1: 簡易課税、2: 本則課税（個別対応方式）、3: 本則課税（一括比例配分方式）、4: 本則課税（全額控除））")

  public Integer getTaxMethod() {
    return taxMethod;
  }


  public void setTaxMethod(Integer taxMethod) {
    this.taxMethod = taxMethod;
  }


  public FiscalYears useIndustryTemplate(Boolean useIndustryTemplate) {
    
    this.useIndustryTemplate = useIndustryTemplate;
    return this;
  }

   /**
   * 製造業向け機能（true: 使用する、false: 使用しない）
   * @return useIndustryTemplate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "製造業向け機能（true: 使用する、false: 使用しない）")

  public Boolean getUseIndustryTemplate() {
    return useIndustryTemplate;
  }


  public void setUseIndustryTemplate(Boolean useIndustryTemplate) {
    this.useIndustryTemplate = useIndustryTemplate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FiscalYears fiscalYears = (FiscalYears) o;
    return Objects.equals(this.depreciationRecordMethod, fiscalYears.depreciationRecordMethod) &&
        Objects.equals(this.endDate, fiscalYears.endDate) &&
        Objects.equals(this.indirectWriteOffMethod, fiscalYears.indirectWriteOffMethod) &&
        Objects.equals(this.returnCode, fiscalYears.returnCode) &&
        Objects.equals(this.salesTaxBusinessCode, fiscalYears.salesTaxBusinessCode) &&
        Objects.equals(this.startDate, fiscalYears.startDate) &&
        Objects.equals(this.taxAccountMethod, fiscalYears.taxAccountMethod) &&
        Objects.equals(this.taxFraction, fiscalYears.taxFraction) &&
        Objects.equals(this.taxMethod, fiscalYears.taxMethod) &&
        Objects.equals(this.useIndustryTemplate, fiscalYears.useIndustryTemplate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(depreciationRecordMethod, endDate, indirectWriteOffMethod, returnCode, salesTaxBusinessCode, startDate, taxAccountMethod, taxFraction, taxMethod, useIndustryTemplate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FiscalYears {\n");
    sb.append("    depreciationRecordMethod: ").append(toIndentedString(depreciationRecordMethod)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    indirectWriteOffMethod: ").append(toIndentedString(indirectWriteOffMethod)).append("\n");
    sb.append("    returnCode: ").append(toIndentedString(returnCode)).append("\n");
    sb.append("    salesTaxBusinessCode: ").append(toIndentedString(salesTaxBusinessCode)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    taxAccountMethod: ").append(toIndentedString(taxAccountMethod)).append("\n");
    sb.append("    taxFraction: ").append(toIndentedString(taxFraction)).append("\n");
    sb.append("    taxMethod: ").append(toIndentedString(taxMethod)).append("\n");
    sb.append("    useIndustryTemplate: ").append(toIndentedString(useIndustryTemplate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

