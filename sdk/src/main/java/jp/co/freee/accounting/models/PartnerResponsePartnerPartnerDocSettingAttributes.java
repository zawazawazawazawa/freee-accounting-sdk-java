/*
 * freee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package jp.co.freee.accounting.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * PartnerResponsePartnerPartnerDocSettingAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PartnerResponsePartnerPartnerDocSettingAttributes {
  /**
   * 請求書送付方法(email:メール、posting:郵送、email_and_posting:メールと郵送)
   */
  @JsonAdapter(SendingMethodEnum.Adapter.class)
  public enum SendingMethodEnum {
    EMAIL("email"),
    
    POSTING("posting"),
    
    EMAIL_AND_POSTING("email_and_posting");

    private String value;

    SendingMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendingMethodEnum fromValue(String value) {
      for (SendingMethodEnum b : SendingMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SendingMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendingMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendingMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendingMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SENDING_METHOD = "sending_method";
  @SerializedName(SERIALIZED_NAME_SENDING_METHOD)
  private SendingMethodEnum sendingMethod;

  public PartnerResponsePartnerPartnerDocSettingAttributes() { 
  }

  public PartnerResponsePartnerPartnerDocSettingAttributes sendingMethod(SendingMethodEnum sendingMethod) {
    
    this.sendingMethod = sendingMethod;
    return this;
  }

   /**
   * 請求書送付方法(email:メール、posting:郵送、email_and_posting:メールと郵送)
   * @return sendingMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "posting", value = "請求書送付方法(email:メール、posting:郵送、email_and_posting:メールと郵送)")

  public SendingMethodEnum getSendingMethod() {
    return sendingMethod;
  }


  public void setSendingMethod(SendingMethodEnum sendingMethod) {
    this.sendingMethod = sendingMethod;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartnerResponsePartnerPartnerDocSettingAttributes partnerResponsePartnerPartnerDocSettingAttributes = (PartnerResponsePartnerPartnerDocSettingAttributes) o;
    return Objects.equals(this.sendingMethod, partnerResponsePartnerPartnerDocSettingAttributes.sendingMethod);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sendingMethod);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartnerResponsePartnerPartnerDocSettingAttributes {\n");
    sb.append("    sendingMethod: ").append(toIndentedString(sendingMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

